// Dynamic windows
fun(nums, k):
  left =0;
  currSum = 0;
  maxWindowSize = 0;
  // keep expanding window to the right
  for(int right = 0; right < n; right++) {
    currSum += nums[right]
    while(currSum > k) { // Check the case where left goes beyond array size
        // keep shrinking the window from left
        currSum -= nums[left];
        left++;
    }
    maxSum = Math.max(maxWindowSize, right - left + 1); // This you need to update when your condition is valid
  }
  return maxWindowSize;

  // Edge Test case is when array is all positive numbers and k = -1

  - Number of subArrays with product strictly less than k - Tricky when k = 1 ****
    - You need to return 0 in case k <=1 as we can never have something with product < 1

// Static length windows

function fun(arr, k):
    curr = some data to keep track of window

    // preprocess to build the initial window
    for(int i = 0; i < k; i++)
        // Do something to build the initial window

    ans = answer variable (may be curr as well depending on problem)
    for(int i = k; i < n; i++) {
        Add arr[i] to window
        Remove arr[i-k] to window
        Update ans
    }
    return ans
